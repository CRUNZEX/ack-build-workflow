#  A github workflow to build custom android common kernels with specified parameters
#  Copyright (C) 2025 chickendrop89
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

name: Build Android Common Kernel

on:
  workflow_dispatch:
    inputs:
      ack_branch:
        description: 'Android-common-kernel branch (e.g. common-android13-5.15)'
        required: true
        default: 'common-android13-5.15'
        type: string
      custom_kernel_repo:
        description: 'Custom kernel repository'
        required: true
        default: 'https://github.com/chickendrop89/device_xiaomi_unified-kernel'
        type: string
      custom_kernel_repo_branch:
        description: 'Custom kernel repository branch'
        required: true
        default: 'android13-5.15-lts'
        type: string
      use_latest_clang:
        description: 'Use the latest clang prebuilts (Check README!)'
        required: true
        default: true
        type: boolean
      anykernel_url:
        description: 'AnyKernel3 fork URL'
        required: true
        default: 'https://github.com/osm0sis/AnyKernel3'
        type: string
      anykernel_branch:
        description: 'AnyKernel3 fork branch, empty for default branch'
        required: false
        default: ''
        type: string
      kernel_image_type:
        description: 'Kernel image to package (Image.gz, Image.lz4, etc)'
        required: true
        default: 'Image'
      fast_build:
        description: 'Instruct tools to perform a fast Build'
        required: true
        default: true
        type: boolean
      use_kleaf:
        description: 'Use kleaf/bazel build system instead of build script'
        required: true
        default: false
        type: boolean
      build_configs:
        description: 'Space-separated list of build configurations'
        required: true
        default: 'build.config.gki.aarch64.chickernel build.config.gki.aarch64.chickernel.ksu build.config.gki.aarch64.chickernel.ksu.susfs'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BUILD_CONFIGS: ${{ github.event.inputs.build_configs }}
      IMAGE_TYPE: ${{ github.event.inputs.kernel_image_type }}
      FINAL_DIR: ${{ github.workspace }}/kernel-build/final_images
    steps:
      - name: Clean up container
        uses: rokibhasansagar/slimhub_actions@main

      - name: Download latest 'repo' tool
        run: |
          mkdir -p ~/.bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
          chmod a+rx ~/.bin/repo
          echo "${HOME}/.bin" >> $GITHUB_PATH

      - name: Setup build workspace and a local manifest
        env:
          USE_LATEST_CLANG: ${{ github.event.inputs.use_latest_clang }}
          COMMON_REPO: ${{ github.event.inputs.custom_kernel_repo }}
          COMMON_REPO_BRANCH: ${{ github.event.inputs.custom_kernel_repo_branch }}
          CUSTOM_MANIFEST: .repo/local_manifests/custom.xml
        run: |
          REPO_SOURCE=$(echo $COMMON_REPO | cut -d'/' -f3)
          REPO_OWNER=$(echo $COMMON_REPO | cut -d'/' -f4)
          REPO_NAME=$(echo $COMMON_REPO | cut -d'/' -f5)

          mkdir kernel-build 
          cd kernel-build
          mkdir -p .repo/local_manifests

          mecho() {
            echo "$1" >> "$CUSTOM_MANIFEST"
          }

          mecho '<?xml version="1.0" encoding="UTF-8"?>'
          mecho '<manifest>'
          mecho "  <remote name=\"common-repo\" fetch=\"https://$REPO_SOURCE/$REPO_OWNER\" />"
          mecho ''
          mecho '  <remove-project name="kernel/common" />'
          mecho "  <project path=\"common\" name=\"$REPO_NAME\" remote=\"common-repo\" revision=\"$COMMON_REPO_BRANCH\" >"
          mecho '    <linkfile src="." dest=".source_date_epoch_dir" />'
          mecho '  </project>'
          if [ "$USE_LATEST_CLANG" = true ]; then
            mecho '  <remove-project name="platform/prebuilts/clang/host/linux-x86" />'
            mecho '  <project path="prebuilts/clang/host/linux-x86" name="platform/prebuilts/clang/host/linux-x86" revision="main" clone-depth="1" />'
          fi
          mecho '</manifest>'

      - name: Download the custom manifest
        working-directory: kernel-build
        env: 
          ACK_BRANCH: ${{ github.event.inputs.ack_branch }}
        run: |
          repo init \
            --no-tags \
            --depth=1 \
            --dissociate \
            -u https://android.googlesource.com/kernel/manifest \
            -b $ACK_BRANCH

          repo sync \
            --no-tags \
            --clone-bundle \
            --current-branch \
            --optimized-fetch \
            --force-sync \
            --fetch-submodules \
            -j$(nproc --all)

      - name: Build and Process Kernels
        working-directory: kernel-build
        env:
          FAST_BUILD: ${{ github.event.inputs.fast_build }}
          USE_KLEAF: ${{ github.event.inputs.use_kleaf }}
          OUT_DIR: ${{ github.workspace }}/kernel-build/out
        run: |
          mkdir -p "${FINAL_DIR}"
          mkdir -p "${OUT_DIR}/dist"

          for config in ${BUILD_CONFIGS}; do
            echo "Building kernel config ${config+1}: $config"
            
            if [ "$USE_KLEAF" = true ]; 
              then
                if [ "${FAST_BUILD}" = true ]; 
                  then tools/bazel build --config=fast //common:$config
                  else tools/bazel build //common:$config
                fi

                if [ -f "bazel-bin/common/$config/${IMAGE_TYPE}" ]; 
                  then
                    cp "bazel-bin/common/$config/${IMAGE_TYPE}" "${FINAL_DIR}/${IMAGE_TYPE}-$config"
                  else
                    echo "Error: Output image not found for $config"
                    exit 1
                fi
              else
                BUILD_CONFIG=common/$config build/build.sh

                if [ -f "${OUT_DIR}/dist/${IMAGE_TYPE}" ]; 
                  then mv "${OUT_DIR}/dist/${IMAGE_TYPE}" "${FINAL_DIR}/${IMAGE_TYPE}-$config"
                  else
                    echo "Error: Output image not found for $config"
                    exit 1
                fi
            fi
          done

      - name: Package Kernels with AnyKernel3
        working-directory: kernel-build
        env:
          AK3_GIT_URL: ${{ github.event.inputs.anykernel_url }}
          AK3_GIT_BRANCH: ${{ github.event.inputs.anykernel_branch }}
          AK3_DIR: ${{ github.workspace }}/kernel-build/anykernel3
        run: |
          if [ -z "$AK3_GIT_BRANCH" ]
            then git clone --depth=1 $AK3_GIT_URL "${AK3_DIR}"
            else git clone --depth=1 $AK3_GIT_URL "${AK3_DIR}" -b $AK3_GIT_BRANCH
          fi

          for config in ${BUILD_CONFIGS}; do
            if [ -f "${FINAL_DIR}/${IMAGE_TYPE}-${config}" ]; then
              cp -r "${AK3_DIR}" "${AK3_DIR}-${config}"
              cd "${AK3_DIR}-${config}"
              
              cp "${FINAL_DIR}/${IMAGE_TYPE}-${config}" "${AK3_DIR}-${config}/${IMAGE_TYPE}"
              zip -r9 "${FINAL_DIR}/${config}.zip" * -x .git README.md *placeholder
              
              cd ..
            fi
          done

      - name: Upload Kernel Packages
        uses: actions/upload-artifact@v4
        with:
          name: kernel-packages
          path: |
            kernel-build/final_images/*.zip
          if-no-files-found: error
