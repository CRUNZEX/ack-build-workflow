name: Build GKI

on:
  workflow_dispatch:
    inputs:
      manifest_url:
        description: 'A manifest URL'
        required: true
        default: 'https://raw.githubusercontent.com/chickendrop89/device_xiaomi_unified-kernel/readme/chickernel.xml'
        type: string
      fast_build:
        description: 'Instruct tools to perform a fast Build'
        required: true
        default: 1
        type: choice
        options:
          - 0
          - 1
      use_bazel:
        description: 'Use Bazel build system instead of build script'
        required: true
        default: false
        type: boolean
      build_config_1:
        description: 'First build configuration'
        required: true
        default: 'build.config.gki.aarch64.chickernel'
        type: string
      build_config_2:
        description: 'Second build configuration (can be empty)'
        required: false
        default: 'build.config.gki.aarch64.chickernel.ksun'
        type: string
      build_config_3:
        description: 'Third build configuration (can be empty)'
        required: false
        default: 'build.config.gki.aarch64.chickernel.ksun.susfs'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Clean up container
        uses: rokibhasansagar/slimhub_actions@main

      - name: Setup build cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.ccache
          key: ${{ runner.os }}-kernel-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-kernel-

      - name: Download latest 'repo' tool
        run: |
          mkdir -p ~/.bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
          chmod a+rx ~/.bin/repo
          echo "${HOME}/.bin" >> $GITHUB_PATH

      - name: Download the custom manifest
        run: |
          mkdir kernel-build && cd kernel-build
          wget -O custom-manifest.xml ${{ github.event.inputs.manifest_url }}

      - name: Download the build environment
        working-directory: kernel-build
        run: | 
          repo init \
            --no-tags \
            --depth=1 \
            --dissociate \
            -u https://android.googlesource.com/kernel/manifest \
            -m $(pwd)/custom-manifest.xml 

          repo sync \
            --no-tags \
            --clone-bundle \
            --current-branch \
            --optimized-fetch \
            --force-sync \
            --fetch-submodules \
            -j$(nproc --all)

      - name: Build and Process Kernels
        working-directory: kernel-build
        env:
          FAST_BUILD: ${{ github.event.inputs.fast_build }}
          OUT_DIR: ${{ github.workspace }}/kernel-build/out
          FINAL_DIR: ${{ github.workspace }}/kernel-build/final_images
          CCACHE_DIR: ~/.ccache
          CCACHE_MAXSIZE: 10G
        run: |
          declare -a CONFIGS=("${{ github.event.inputs.build_config_1 }}")
          [[ -n "${{ github.event.inputs.build_config_2 }}" ]] && CONFIGS+=("${{ github.event.inputs.build_config_2 }}")
          [[ -n "${{ github.event.inputs.build_config_3 }}" ]] && CONFIGS+=("${{ github.event.inputs.build_config_3 }}")

          mkdir -p "${FINAL_DIR}"
          mkdir -p "${OUT_DIR}/dist"

          for i in "${!CONFIGS[@]}"; do
            echo "Building kernel config ${i+1}: ${CONFIGS[$i]}"
            
            if [ "${{ github.event.inputs.use_bazel }}" = true ]; 
              then
                if [ "${FAST_BUILD}" = 1 ]; 
                  then tools/bazel build --config=fast //common:${CONFIGS[$i]}
                  else tools/bazel build //common:${CONFIGS[$i]}
                fi

                if [ -f "bazel-bin/common/${CONFIGS[$i]}/Image" ]; 
                  then
                    cp "bazel-bin/common/${CONFIGS[$i]}/Image" "${FINAL_DIR}/Image-${CONFIGS[$i]}"
                  else
                    echo "Error: Output image not found for ${CONFIGS[$i]}"
                    exit 1
                fi
              else
                BUILD_CONFIG=common/${CONFIGS[$i]} build/build.sh

                if [ -f "${OUT_DIR}/dist/Image" ]; 
                  then mv "${OUT_DIR}/dist/Image" "${FINAL_DIR}/Image-${CONFIGS[$i]}"
                  else
                    echo "Error: Output image not found for ${CONFIGS[$i]}"
                    exit 1
                fi
            fi
          done

      - name: Upload Kernel Images
        uses: actions/upload-artifact@v4
        with:
          name: kernel-images
          path: kernel-build/final_images/Image-*
          if-no-files-found: error
