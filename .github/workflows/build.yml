
#  A custom github workflow to build kernel images with specified parameters and manifest 
#  Copyright (C) 2025 chickendrop89
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

name: Build GKI

on:
  workflow_dispatch:
    inputs:
      manifest_url:
        description: 'A manifest URL'
        required: true
        default: 'https://raw.githubusercontent.com/chickendrop89/device_xiaomi_unified-kernel/readme/chickernel.xml'
        type: string
      anykernel_url:
        description: 'AnyKernel3 fork URL'
        required: true
        default: 'https://github.com/osm0sis/AnyKernel3'
        type: string
      fast_build:
        description: 'Instruct tools to perform a fast Build'
        required: true
        default: true
        type: boolean
      use_bazel:
        description: 'Use Bazel build system instead of build script'
        required: true
        default: false
        type: boolean
      build_configs:
        description: 'Space-separated list of build configurations'
        required: true
        default: 'build.config.gki.aarch64.chickernel build.config.gki.aarch64.chickernel.ksu build.config.gki.aarch64.chickernel.ksu.susfs'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Clean up container
        uses: rokibhasansagar/slimhub_actions@main

      - name: Download latest 'repo' tool
        run: |
          mkdir -p ~/.bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
          chmod a+rx ~/.bin/repo
          echo "${HOME}/.bin" >> $GITHUB_PATH

      - name: Download the custom manifest
        run: |
          mkdir kernel-build && cd kernel-build
          wget -O custom-manifest.xml ${{ github.event.inputs.manifest_url }}

      - name: Download the build environment
        working-directory: kernel-build
        run: | 
          repo init \
            --no-tags \
            --depth=1 \
            --dissociate \
            -u https://android.googlesource.com/kernel/manifest \
            -m $(pwd)/custom-manifest.xml 

          repo sync \
            --no-tags \
            --clone-bundle \
            --current-branch \
            --optimized-fetch \
            --force-sync \
            --fetch-submodules \
            -j$(nproc --all)

      - name: Build and Process Kernels
        working-directory: kernel-build
        env:
          BUILD_CONFIGS: ${{ github.event.inputs.build_configs }}
          FAST_BUILD: ${{ github.event.inputs.fast_build }}
          OUT_DIR: ${{ github.workspace }}/kernel-build/out
          FINAL_DIR: ${{ github.workspace }}/kernel-build/final_images
        run: |
          mkdir -p "${FINAL_DIR}"
          mkdir -p "${OUT_DIR}/dist"

          for config in ${BUILD_CONFIGS}; do
            echo "Building kernel config ${config+1}: $config"
            
            if [ "${{ github.event.inputs.use_bazel }}" = true ]; 
              then
                if [ "${FAST_BUILD}" = true ]; 
                  then tools/bazel build --config=fast //common:$config
                  else tools/bazel build //common:$config
                fi

                if [ -f "bazel-bin/common/$config/Image" ]; 
                  then
                    cp "bazel-bin/common/$config/Image" "${FINAL_DIR}/Image-$config"
                  else
                    echo "Error: Output image not found for $config"
                    exit 1
                fi
              else
                BUILD_CONFIG=common/$config build/build.sh

                if [ -f "${OUT_DIR}/dist/Image" ]; 
                  then mv "${OUT_DIR}/dist/Image" "${FINAL_DIR}/Image-$config"
                  else
                    echo "Error: Output image not found for $config"
                    exit 1
                fi
            fi
          done

      - name: Package Kernels with AnyKernel3
        working-directory: kernel-build
        env:
          BUILD_CONFIGS: ${{ github.event.inputs.build_configs }}
          FINAL_DIR: ${{ github.workspace }}/kernel-build/final_images
          AK3_DIR: ${{ github.workspace }}/kernel-build/anykernel3
        run: |
          git clone --depth=1 ${{ github.event.inputs.anykernel_url }} "${AK3_DIR}"

          for config in ${BUILD_CONFIGS}; do
            if [ -f "${FINAL_DIR}/Image-${config}" ]; then
              cp -r "${AK3_DIR}" "${AK3_DIR}-${config}"
              cd "${AK3_DIR}-${config}"
              
              cp "${FINAL_DIR}/Image-${config}" "${AK3_DIR}-${config}/Image"
              zip -r9 "${FINAL_DIR}/${config}.zip" * -x .git README.md *placeholder
              
              cd ..
            fi
          done

      - name: Upload Kernel Packages
        uses: actions/upload-artifact@v4
        with:
          name: kernel-packages
          path: |
            kernel-build/final_images/*.zip
          if-no-files-found: error
